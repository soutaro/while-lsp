module WhileLSP
  # WhileLSPのプログラムは、一つのソースコードで表現されることにする
  # つまり、複数のファイルにまたがったプログラムを書くことはできない
  #
  class Program
    # ファイルのURI
    attr_reader uri: String

    # ソースコードのテキスト
    attr_reader src: String

    # 構文木
    #
    # - 構文解析できた場合にはSyntaxTree::program
    # - 失敗したときにはParser::Error
    #
    attr_reader syntax: SyntaxTree::program | Parser::Error

    # 型検査の結果
    #
    # - 構文解析できたときにはTypeCheckerのオブジェクト
    # - 構文解析失敗したときには nil
    attr_reader typechecker: TypeChecker?

    def initialize: (String uri) -> void

    # ソースコードを更新して、syntaxとtypecheckerの値を更新する
    def update: (String text) -> void

    @diagnostics: Array[diagnostic]

    # 型エラー、構文エラーが保存されている
    #
    def diagnostics: () -> Array[diagnostic]

    # Returns the character position from (zero-origin) line and character
    #
    def position: (Integer line, Integer character) -> Integer

    # Returns the pair of 0-origin line and character from the character position
    #
    def line_char: (Integer position) -> [Integer, Integer]

    # Find the syntax node at the given position
    def locate_syntax: (Integer position) -> (SyntaxTree::statement | SyntaxTree::expr | SyntaxTree::FunctionDeclaration | nil)

    # Find the expression at the given position
    def locate_expr: (Integer position, SyntaxTree::expr) -> SyntaxTree::expr?

    # Find the statement at the given position
    def locate_statement: (Integer position, SyntaxTree::statement) -> (SyntaxTree::statement | SyntaxTree::expr | nil)

    # Find the function definition at the given position
    def locate_function: (Integer position, SyntaxTree::FunctionDeclaration) -> (SyntaxTree::FunctionDeclaration | SyntaxTree::statement | SyntaxTree::expr | nil)
  end
end
